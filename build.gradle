plugins {
	id 'fabric-loom' version '0.9-SNAPSHOT'
	id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

static String terraformers() {
	def url = "https://maven.terraformersmc.com/"
	def conn = new URL(url).openConnection()
	conn.connect()
	url = conn.getResponseCode() == 521 ? "https://raw.githubusercontent.com/TerraformersMC/Archive/main/releases" : url
	return url
}

repositories {
	maven { url = terraformers() }
	maven { url = "https://maven.ryanliptak.com/" }
	maven { url = "https://maven.shedaniel.me/" }
	maven { url = "https://api.modrinth.com/maven" }
	maven { url = "https://aperlambda.github.io/maven" }
	maven { url = "https://jitpack.io" }
}

// please stop making mod menu transitive
dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	modImplementation("me.shedaniel:RoughlyEnoughItems:${project.rei_version}") {
		exclude(group: "com.terraformersmc")
		exclude(group: "io.github.prospector")
	}
	modApi "com.terraformersmc:modmenu:${project.modmenu_version}"

	modApi("squeek.appleskin:appleskin-fabric:${project.appleskin_version}:api") {
		exclude(group: "com.terraformersmc")
		exclude(group: "io.github.prospector")
	}
	modApi "maven.modrinth:mealapi:${project.mealapi_version}"

	modRuntime("squeek.appleskin:appleskin-fabric:${project.appleskin_version}") {
		exclude(group: "com.terraformersmc")
		exclude(group: "io.github.prospector")
	}

	modImplementation "com.github.lambdaurora:spruceui:${project.spruceui_version}"
	include "com.github.lambdaurora:spruceui:${project.spruceui_version}"
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}

task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = "sources"
	from sourceSets.main.allSource
}

jar {
	from "LICENSE"
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	repositories {
		mavenLocal()
	}
}
